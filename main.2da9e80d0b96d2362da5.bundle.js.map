{"version":3,"file":"main.2da9e80d0b96d2362da5.bundle.js","sources":["webpack:///../common/analysis/index.ts"],"sourcesContent":["import { FullDefAnon } from \"../../types\";\nimport { actionLinks, actionGenerators, generatorLayers } from \"../\";\n\ntype ActionAnalysis = {\n  priorMarks: string[];\n  from: string[];\n  links: string[];\n  generators: string[];\n  addedArtifacts: string[];\n  priorArtifacts: string[];\n  isCmnd?: boolean;\n  addsMark?: string;\n};\n\nexport function analyseGame(gameDef: FullDefAnon) {\n  const ret: { [plr: string]: { [action: string]: ActionAnalysis } } = {};\n  for (const plr of [1, 2]) {\n    const plrAnalysis = {} as { [action: string]: ActionAnalysis };\n    let toCheck: ([string] | [string, string])[] = [[\"startTurn\"]];\n    while (toCheck.length) {\n      const [action, from] = (toCheck.shift() as unknown) as (\n        | [string]\n        | [string, string]);\n      const links = actionLinks(gameDef, plr as 1 | 2, action);\n      if (!plrAnalysis[action]) {\n        plrAnalysis[action] = {\n          priorMarks: [],\n          from: [],\n          links: [],\n          generators: [],\n          addedArtifacts: [],\n          priorArtifacts: []\n        };\n      }\n      if (gameDef.flow.marks[action]) plrAnalysis[action].addsMark = action;\n      if (gameDef.flow.commands[action]) plrAnalysis[action].isCmnd = true;\n\n      plrAnalysis[action].generators = actionGenerators(\n        gameDef,\n        plr as 1 | 2,\n        action\n      );\n\n      plrAnalysis[action].addedArtifacts = Array.from(\n        new Set(\n          plrAnalysis[action].generators.reduce(\n            (mem, genName) =>\n              mem.concat(\n                generatorLayers(\n                  gameDef.generators[genName],\n                  plr as 1 | 2,\n                  action\n                )\n              ),\n            [] as string[]\n          )\n        )\n      );\n\n      // TODO - uniq\n      plrAnalysis[action].links = plrAnalysis[action].links.concat(links);\n      if (action !== \"startTurn\") {\n        plrAnalysis[action].from.push(from as string);\n        plrAnalysis[action].priorMarks = plrAnalysis[action].from.reduce(\n          (mem, l) => {\n            const prev = plrAnalysis[l];\n            return [\n              ...mem,\n              ...(prev.isCmnd\n                ? []\n                : prev.priorMarks.concat(prev.addsMark || []))\n            ];\n          },\n          plrAnalysis[action].priorMarks\n        );\n        plrAnalysis[action].priorArtifacts = plrAnalysis[action].from.reduce(\n          (mem, l) => {\n            const prev = plrAnalysis[l];\n            return Array.from(\n              new Set(\n                mem.concat(\n                  prev.priorArtifacts.concat(prev.addedArtifacts || [])\n                )\n              )\n            );\n          },\n          plrAnalysis[action].priorArtifacts\n        );\n      }\n\n      for (const link of links) {\n        if (link !== \"endTurn\" && !plrAnalysis[link]) {\n          toCheck.push([link, action]);\n        }\n      }\n    }\n    ret[plr] = plrAnalysis;\n  }\n  return ret;\n}\ntry {\n    // @ts-ignore\n    analyseGame.displayName = \"analyseGame\";\n    // @ts-ignore\n    analyseGame.__docgenInfo = { \"description\": \"\", \"displayName\": \"analyseGame\", \"props\": { \"AI\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"AI\", \"required\": true, \"type\": { \"name\": \"AI<string, string, string, string, string, string, string, string, string, number, number, string, string, string, string, string, string, string>\" } }, \"anim\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"anim\", \"required\": true, \"type\": { \"name\": \"Partial<{ [x: string]: AlgolStatement<AlgolAnimInner<string, string, string, string, string, string, string, string, string>, string, string, string, string, string, string, string, string>[]; }>\" } }, \"board\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"board\", \"required\": true, \"type\": { \"name\": \"AlgolBoard<number, number, string, string, string>\" } }, \"setup\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"setup\", \"required\": true, \"type\": { \"name\": \"Partial<{ [x: string]: Partial<{ 0: AlgolEntity<string>[]; 1: AlgolEntity<string>[]; 2: AlgolEntity<string>[]; }>; }>\" } }, \"graphics\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"graphics\", \"required\": true, \"type\": { \"name\": \"Graphics<string, string>\" } }, \"grids\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"grids\", \"required\": false, \"type\": { \"name\": \"{ [x: string]: any; }\" } }, \"instructions\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"instructions\", \"required\": true, \"type\": { \"name\": \"Instructions<string, string, string, string, string, string, string, string, string, string>\" } }, \"meta\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"meta\", \"required\": true, \"type\": { \"name\": \"AlgolMeta<string, string>\" } }, \"flow\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"flow\", \"required\": true, \"type\": { \"name\": \"Flow<string, string, string, string, string, string, string, string, string, string>\" } }, \"generators\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"generators\", \"required\": true, \"type\": { \"name\": \"Generators<string, string, string, string, string, string, string, string, string, string>\" } }, \"scripts\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"scripts\", \"required\": true, \"type\": { \"name\": \"AlgolGameTestSuite<string, string>\" } }, \"performance\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"performance\", \"required\": true, \"type\": { \"name\": \"AlgolPerformance<string, string>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"../common/analysis/index.ts#analyseGame\"] = { docgenInfo: analyseGame.__docgenInfo, name: \"analyseGame\", path: \"../common/analysis/index.ts#analyseGame\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAcA","sourceRoot":""}